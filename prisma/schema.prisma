// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums
enum UserRole {
  ADMIN // superadmin del saas
  MERCHANT // dueño/operador de tienda
  CUSTOMER // cliente final
}

enum StoreStatus {
  ACTIVE
  PAUSED
  DISABLED
}

enum OrderStatus {
  DRAFT
  PENDING
  PAID
  FULFILLED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

enum ShippingStatus {
  PENDING
  LABEL_CREATED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum NotificationStatus {
  DRAFT
  SCHEDULED
  SENT
  FAILED
}

enum DeliveryStatus {
  PENDING
  SENT
  OPENED
  BOUNCED
}

enum PreferenceStatus {
  ENABLED
  DISABLED
  MUTE
}

// core

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String?
  role         UserRole @default(CUSTOMER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // back relations
  ownedStores       Store[] // dueño (ownerUserId)
  adminOf           StoreAdmin[] // admin/operador de tiendas
  customerOf        StoreCustomer[] // suscripciones a tiendas
  carts             Cart[]
  orders            Order[]
  emailTemplates    EmailTemplate[]
  notificationPrefs NotificationPreference[]
}

model Store {
  id          String      @id @default(cuid())
  ownerUserId String
  name        String
  slug        String      @unique
  status      StoreStatus @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  owner User @relation(fields: [ownerUserId], references: [id])

  // back relations
  admins            StoreAdmin[]
  customers         StoreCustomer[]
  categories        Category[]
  products          Product[]
  carts             Cart[]
  orders            Order[]
  notifications     Notification[]
  emailTemplates    EmailTemplate[]
  notificationPrefs NotificationPreference[]
}

model StoreAdmin {
  id        String   @id @default(cuid())
  storeId   String
  userId    String
  role      String   @default("editor")
  createdAt DateTime @default(now())

  store Store @relation(fields: [storeId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([storeId, userId])
}

model StoreCustomer {
  id                 String   @id @default(cuid())
  storeId            String
  userId             String
  subscribedToNotifs Boolean  @default(true)
  name               String?
  email              String?
  address            String?
  sex                String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  deliveries NotificationDelivery[]

  @@unique([storeId, userId])
}

// catalogo
model Category {
  id           String   @id @default(cuid())
  storeId      String
  name         String
  slug         String
  parentId     String?
  isFeaturedIn Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  store    Store      @relation(fields: [storeId], references: [id])
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")

  productLinks ProductCategory[]

  @@unique([storeId, slug]) // unico por tienda
  @@index([storeId])
  @@index([parentId])
}

model Product {
  id          String   @id @default(cuid())
  storeId     String
  title       String
  slug        String
  description String?
  price       Decimal  @db.Decimal(12, 2)
  imageUrl    String?
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store         Store             @relation(fields: [storeId], references: [id])
  variants      ProductVariant[]
  categoryLinks ProductCategory[]
  cartItems     CartItem[]
  orderItems    OrderItem[]

  @@unique([storeId, slug]) // slug unico por tienda
  @@index([storeId])
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  sku       String   @unique
  name      String?
  price     Decimal? @db.Decimal(12, 2)
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product    Product     @relation(fields: [productId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model ProductCategory {
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

// carrito de compras

model Cart {
  id        String    @id @default(cuid())
  storeId   String
  userId    String?
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  store Store      @relation(fields: [storeId], references: [id])
  user  User?      @relation(fields: [userId], references: [id])
  items CartItem[]

  @@index([storeId])
  @@index([userId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  variantId String?
  qty       Int
  price     Decimal  @db.Decimal(12, 2)
  title     String
  imgUrl    String?
  metaJson  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart            @relation(fields: [cartId], references: [id])
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

// =ordenes, pagos, envios

model Order {
  id        String      @id @default(cuid())
  storeId   String
  userId    String?
  status    OrderStatus @default(PENDING)
  currency  String      @default("ARS")
  subtotal  Decimal     @db.Decimal(12, 2)
  discount  Decimal     @default(0) @db.Decimal(12, 2)
  shipping  Decimal     @default(0) @db.Decimal(12, 2)
  total     Decimal     @db.Decimal(12, 2)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  isOld     Boolean     @default(false)

  store Store @relation(fields: [storeId], references: [id])
  user  User? @relation(fields: [userId], references: [id])

  items        OrderItem[]
  payments     Payment[]
  shippingInfo Shipping?

  @@index([storeId])
  @@index([userId])
}

model OrderItem {
  id            String  @id @default(cuid())
  orderId       String
  productId     String
  variantId     String?
  titleSnapshot String
  qty           Int
  price         Decimal @db.Decimal(12, 2)

  order   Order           @relation(fields: [orderId], references: [id])
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model Payment {
  id          String        @id @default(cuid())
  orderId     String
  provider    String // "mercadopago", "stripe", etc.
  providerRef String?
  amount      Decimal       @db.Decimal(12, 2)
  status      PaymentStatus @default(PENDING)
  payloadJson Json?
  createdAt   DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model Shipping {
  id             String         @id @default(cuid())
  orderId        String         @unique
  address        String
  shippingPro    String? // "correo-argentino", etc.
  trackingNumber String?
  status         ShippingStatus @default(PENDING)
  label          String? // URL/ID de etiqueta
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  order Order @relation(fields: [orderId], references: [id])
}

// ===== Notificaciones / Preferencias / Emails =====

model Notification {
  id      String             @id @default(cuid())
  storeId String
  type    String // "PROMO", "ORDER_STATUS", etc.
  sentAt  DateTime?
  status  NotificationStatus @default(DRAFT)

  store      Store                  @relation(fields: [storeId], references: [id])
  deliveries NotificationDelivery[]

  @@index([storeId])
}

model NotificationDelivery {
  id              String         @id @default(cuid())
  notificationId  String
  storeCustomerId String
  status          DeliveryStatus @default(PENDING)
  sentAt          DateTime?
  openedAt        DateTime?
  errorMsg        String?

  notification  Notification  @relation(fields: [notificationId], references: [id])
  storeCustomer StoreCustomer @relation(fields: [storeCustomerId], references: [id])

  @@unique([notificationId, storeCustomerId]) // 1 delivery por cliente/notificación
  @@index([notificationId])
  @@index([storeCustomerId])
}

model NotificationPreference {
  id        String           @id @default(cuid())
  userId    String
  storeId   String
  status    PreferenceStatus @default(ENABLED)
  level     String? // "low", "normal", "all"
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  store Store @relation(fields: [storeId], references: [id])

  @@unique([userId, storeId])
  @@index([storeId])
}

model EmailTemplate {
  id       String    @id @default(cuid())
  storeId  String
  userId   String?
  sentAt   DateTime?
  action   String
  entity   String?
  entityId String?
  metaJson Json?
  textTpl  String

  // Relaciones simples (evita el error de “missing opposite relation”)
  store Store @relation(fields: [storeId], references: [id])
  user  User? @relation(fields: [userId], references: [id])

  @@index([storeId])
  @@index([userId])
}
