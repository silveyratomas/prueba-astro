---
import Layout from "../layouts/Layout.astro";
import { products } from "../data/products";

// Base: si admin no define destacados, usamos los que tengan p.featured === true
const baseDestacados = products.filter((p) => p.featured);

// Formateador ARS
const fmt = (c: number) =>
  new Intl.NumberFormat("es-AR", { style: "currency", currency: "ARS" }).format(c);
---

<Layout title="TuTienda – Inicio">
  <!-- Hero -->
  <section id="homeHero" class="relative overflow-hidden rounded-xl mb-12 pt-6 text-center">
    <!-- overlay (lo activa el JS si hay imagen) -->
    <div id="homeHeroOv" class="pointer-events-none absolute inset-0 hidden"></div>

    <h1 class="h1 relative z-10 text-[var(--text)]">
      Bienvenid@ a <span id="brandNameHome" class="text-[var(--accent)]">TuTienda</span>
    </h1>

    <p id="homeTagline" class="mt-3 mx-auto max-w-2xl relative z-10 text-[var(--muted)]">
      Catálogo ágil, productos fáciles de administrar y una experiencia de compra simple.
    </p>

    <div class="mt-6 flex flex-wrap justify-center gap-4 relative z-10">
      <a id="cta1" href="/listado_box" class="btn">Ver productos</a>
      <a id="cta2" href="/listado_tablas" class="btn">Listado en tabla</a>
      <a id="cta3" href="/comprar" class="btn">Ir a comprar</a>
    </div>
  </section>

  <!-- Features -->
  <section class="grid gap-6 md:grid-cols-3 mb-12">
    <div class="card text-center">
      <h3 class="mb-2 text-lg font-semibold text-[var(--text)]">Catálogo en tarjetas</h3>
      <p class="text-sm text-[var(--muted)]">Explorá el listado tipo “box”.</p>
      <a href="/listado_box" class="btn mt-3">Abrir listado (box)</a>
    </div>
    <div class="card text-center">
      <h3 class="mb-2 text-lg font-semibold text-[var(--text)]">Vista en tabla</h3>
      <p class="text-sm text-[var(--muted)]">Compará productos y precios.</p>
      <a href="/listado_tablas" class="btn mt-3">Abrir listado (tabla)</a>
    </div>
    <div class="card text-center">
      <h3 class="mb-2 text-lg font-semibold text-[var(--text)]">Compra sencilla</h3>
      <p class="text-sm text-[var(--muted)]">Formulario con datos del cliente y carrito.</p>
      <a href="/comprar" class="btn mt-3">Completar compra</a>
    </div>
  </section>

  <!-- Destacados -->
  <section>
    <div class="mb-4 flex items-center justify-between">
      <h2 class="h2 text-[var(--text)]">Destacados</h2>
      <a href="/listado_box" class="text-sm text-[var(--accent)] hover:underline">Ver todo →</a>
    </div>

    <div id="destGrid" class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
      {baseDestacados.map((p) => (
        <article
          class="card flex flex-col"
          data-slug={p.slug}
          data-featured={p.featured ? "1" : "0"}
        >
          <!-- wrapper 16:9 para imágenes -->
          <div
            class="relative mb-3 w-full overflow-hidden rounded-lg bg-[var(--card-border)]"
            style="padding-top:56.25%;"
          >
            <img
              src={p.img}
              alt={p.title}
              class="absolute inset-0 h-full w-full object-contain"
              loading="lazy"
            />
          </div>
          <h3 class="text-lg font-semibold text-[var(--text)]">{p.title}</h3>
          <p class="text-[var(--muted)]">{fmt(p.price)}</p>
          <p class="mb-3 text-sm text-[var(--muted)]">{p.description}</p>
          <div class="mt-auto flex gap-2">
            <a class="btn" href={`/producto/${p.slug}`}>Ver</a>
            <button
              class="inline-flex items-center rounded-lg border border-[var(--card-border)] px-4 py-2 hover:bg-[var(--surface)] transition"
              onclick={`tpCart.addToCart(${JSON.stringify({
                slug: p.slug,
                title: p.title,
                price: p.price,
                qty: 1,
              })})`}
            >
              Agregar
            </button>
          </div>
        </article>
      ))}
    </div>

    <!-- Mensaje si no hay destacados -->
    <p id="noFeaturedMsg" class="mt-6 hidden text-center text-[var(--muted)]">
      No hay productos destacados por ahora.
    </p>
  </section>

  <!-- Aplica config del admin (tema/nombre/banner/tagline/ctas/destacados) -->
  <script>
    // @ts-nocheck
    document.addEventListener("DOMContentLoaded", () => {
      const cfg =
        window.__storeConfig ||
        (window.tpAdmin && tpAdmin.getConfig ? tpAdmin.getConfig() : {}) ||
        {};

      // Nombre de la tienda en el hero
      const brandHome = document.getElementById("brandNameHome");
      if (brandHome && cfg.storeName) brandHome.textContent = cfg.storeName;

      // Tagline
      const tag = document.getElementById("homeTagline");
      if (tag && cfg.tagline) tag.textContent = cfg.tagline;

      // CTAs (si se definieron en admin)
      function setCta(id, text, href) {
        const el = document.getElementById(id);
        if (!el) return;
        if (text) el.textContent = text;
        if (href) el.href = href;
      }
      setCta("cta1", cfg.cta1Text, cfg.cta1Href);
      setCta("cta2", cfg.cta2Text, cfg.cta2Href);
      setCta("cta3", cfg.cta3Text, cfg.cta3Href);

      // Imagen de fondo del hero
      const hero = document.getElementById("homeHero");
      const ov = document.getElementById("homeHeroOv");
      if (hero && cfg.heroImage) {
        hero.style.minHeight = "380px";
        hero.style.backgroundImage = `url('${cfg.heroImage}')`;
        hero.style.backgroundSize = "cover";
        hero.style.backgroundPosition = "center";

        if (ov) {
          ov.classList.remove("hidden");
          ov.style.background =
            "linear-gradient(180deg, rgba(0,0,0,.35) 0%, rgba(0,0,0,.20) 70%, rgba(0,0,0,0) 100%)";
        }
        // Forzamos contraste legible sobre imagen
        hero.querySelectorAll("h1, p, a.btn").forEach((el) => {
          el.classList.add("!text-white");
        });
      }

      // Destacados desde admin (featuredSlugs) — si existen, filtramos
      const destGrid = document.getElementById("destGrid");
      const noMsg = document.getElementById("noFeaturedMsg");
      if (destGrid && Array.isArray(cfg.featuredSlugs) && cfg.featuredSlugs.length) {
        const set = new Set(cfg.featuredSlugs);
        let visible = 0;
        destGrid.querySelectorAll("[data-slug]").forEach((card) => {
          const slug = card.getAttribute("data-slug");
          const show = set.has(slug);
          card.style.display = show ? "" : "none";
          if (show) visible++;
        });
        noMsg?.classList.toggle("hidden", visible > 0);
      } else {
        // Si no hay featuredSlugs ni productos featured, mostramos el mensaje
        const any = destGrid?.querySelector("[data-slug]");
        const anyVisible = any != null;
        noMsg?.classList.toggle("hidden", anyVisible);
      }

      // (Opcional) Aplicar clase de tema si Layout no lo hizo
      if (window.tpAdmin?.applyThemeClass) {
        tpAdmin.applyThemeClass(cfg.themeClass || "");
      }
    });
  </script>
</Layout>
