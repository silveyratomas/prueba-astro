---
import AdminLayout from "../../layouts/AdminLayout.astro";
---

<AdminLayout title="Panel de Administración">
  <div class="grid lg:grid-cols-[1fr,420px] gap-6 items-start">
    <!-- Izquierda: Ajustes claros y lenguaje simple -->
    <section
      class="bg-[var(--card)] border border-[var(--card-border)] rounded-xl p-6 space-y-6"
    >
      <header class="flex items-center justify-between">
        <div>
          <h1 class="text-xl font-bold">Ajustes de la tienda</h1>
          <p class="text-sm text-[var(--muted)]">
            Configurá la información que verán tus clientes en la tienda.
          </p>
        </div>
        <span
          id="statusBadge"
          class="text-xs rounded-full px-2 py-1 border border-[var(--card-border)] text-[var(--muted)]"
          >—</span
        >
      </header>

      <form
        id="cfgForm"
        class="grid gap-4"
        onsubmit="event.preventDefault(); window.__adm.saveDraft();"
      >
        <div>
          <label class="text-sm font-medium">Nombre de la tienda</label>
          <input
            id="storeName"
            placeholder="Ej: La Tienda de Juan"
            class="mt-2 w-full rounded-lg border border-[var(--card-border)] px-4 py-2 bg-white"
          />
          <p class="text-xs text-[var(--muted)] mt-1">
            Nombre visible para todas las personas.
          </p>
        </div>

        <div>
          <label class="text-sm font-medium">Color del tema</label>
          <select
            id="themeClass"
            class="mt-2 w-full rounded-lg border border-[var(--card-border)] px-4 py-2 bg-white"
          >
            <option value="">Predeterminado</option>
            <option value="theme-profesional">Profesional (azul/verde)</option>
            <option value="theme-azul">Azul</option>
            <option value="theme-naranja-profesional">Naranja</option>
          </select>
          <p class="text-xs text-[var(--muted)] mt-1">
            Cambia la paleta de colores del sitio.
          </p>
        </div>

        <div>
          <label class="text-sm font-medium">Imagen principal (URL)</label>
          <input
            id="heroImage"
            placeholder="/imgs/tu-banner.jpg"
            class="mt-2 w-full rounded-lg border border-[var(--card-border)] px-4 py-2 bg-white"
          />
          <p class="text-xs text-[var(--muted)] mt-1">
            Imagen grande que se ve en la parte superior de la página.
          </p>
        </div>

        <div>
          <label class="text-sm font-medium">Frase corta</label>
          <input
            id="tagline"
            placeholder="Ej: Envío gratis a todo el país"
            class="mt-2 w-full rounded-lg border border-[var(--card-border)] px-4 py-2 bg-white"
          />
        </div>

        <div>
          <label class="text-sm font-medium">Productos en la portada</label>
          <select
            id="featured"
            multiple
            class="mt-2 w-full h-40 rounded-lg border border-[var(--card-border)] px-3 py-2 bg-white"
          >
            <!-- se carga dinámicamente desde la API -->
          </select>
          <p class="text-xs text-[var(--muted)] mt-1">
            Seleccioná los productos que querés mostrar primero en la tienda.
          </p>
        </div>

        <div>
          <label class="text-sm font-medium">Texto del pie de página</label>
          <input
            id="footerText"
            placeholder="© 2025 MiTienda — Todos los derechos reservados"
            class="mt-2 w-full rounded-lg border border-[var(--card-border)] px-4 py-2 bg-white"
          />
        </div>

        <div class="flex gap-2 pt-2">
          <button type="submit" class="btn">Guardar cambios</button>
          <button
            type="button"
            class="btn-white"
            onclick="window.__adm.publish()">Publicar ahora</button
          >
          <button
            type="button"
            class="btn-white"
            onclick="window.__adm.revertToPublished()">Revertir</button
          >
        </div>
      </form>
    </section>

    <!-- Derecha: Vista previa y gestión de categorías -->
    <aside class="space-y-6">
      <section
        class="bg-[var(--card)] border border-[var(--card-border)] rounded-xl p-4"
      >
        <div class="flex items-center justify-between mb-3">
          <div>
            <strong>Vista previa</strong>
            <div class="text-xs text-[var(--muted)]">
              Borrador (no afecta al público)
            </div>
          </div>
          <div class="flex gap-2">
            <button class="btn-white" onclick="window.__adm.refreshPreview()"
              >Actualizar</button
            >
            <a class="btn-white" href="/?preview=1" target="_blank">Abrir</a>
          </div>
        </div>
        <iframe
          id="previewFrame"
          src="/?preview=1"
          class="w-full h-[48vh] bg-white"></iframe>
      </section>

      <section
        class="bg-[var(--card)] border border-[var(--card-border)] rounded-xl p-4"
      >
        <h3 class="font-semibold mb-2">Categorías</h3>
        <p class="text-xs text-[var(--muted)] mb-3">
          Creá, editá y borrá categorías para organizar tus productos.
        </p>

        <form id="catForm" class="space-y-2">
          <input
            id="storeFilter"
            name="storeSlug"
            placeholder="Slug de la tienda"
            value="mi-tienda-demo"
            class="w-full rounded-lg border border-[var(--card-border)] px-3 py-2 bg-white text-sm"
          />
          <input
            name="name"
            placeholder="Nombre de la categoría"
            class="w-full rounded-lg border border-[var(--card-border)] px-3 py-2 bg-white text-sm"
          />
          <input
            name="slug"
            placeholder="slug-de-la-categoria"
            class="w-full rounded-lg border border-[var(--card-border)] px-3 py-2 bg-white text-sm"
          />
          <div class="flex gap-2">
            <input
              name="parentSlug"
              placeholder="slug de categoría padre (opcional)"
              class="flex-1 rounded-lg border border-[var(--card-border)] px-3 py-2 bg-white text-sm"
            />
            <label class="inline-flex items-center gap-2">
              <input type="checkbox" name="isOffer" />
              <span class="text-sm">En oferta</span>
            </label>
          </div>
          <div class="flex gap-2">
            <button class="btn" type="submit">Crear categoría</button>
            <button
              class="btn-outline"
              type="button"
              onclick="window.__loadList()">Listar</button
            >
          </div>
        </form>

        <ul id="catList" class="mt-3 space-y-2 text-sm text-[var(--muted)]">
          <li>Cargando categorías…</li>
        </ul>
      </section>
    </aside>
  </div>

  <!-- Script de administración profesional (borrador/publicado/preview/history) -->
  <script>
    // @ts-nocheck
    (function () {
      // Claves de storage
      const K_PUB = "tp_cfg"; // publicado
      const K_DRAFT = "tp_cfg_draft"; // borrador
      const K_PREV = "tp_cfg_preview"; // cache que lee la vista previa
      const K_HIST = "tp_cfg_hist"; // pila de cambios de borrador
      const K_HIDX = "tp_cfg_hist_idx"; // puntero actual en el historial

      // Utils ---------------------------------------------------------------
      const $ = (id) => document.getElementById(id);
      const form = $("cfgForm");
      const statusBadge = $("statusBadge");
      const iframe = $("previewFrame");
      const importInput = $("importFile");

      function read(key, fallback) {
        try {
          const v = localStorage.getItem(key);
          return v ? JSON.parse(v) : fallback;
        } catch {
          return fallback;
        }
      }
      function write(key, obj) {
        localStorage.setItem(key, JSON.stringify(obj));
      }
      function stamp() {
        return new Date().toLocaleTimeString();
      }

      function getDraft() {
        return read(K_DRAFT, read(K_PUB, {}));
      }
      function getPublished() {
        return read(K_PUB, {});
      }
      function setDraft(cfg) {
        write(K_DRAFT, cfg);
        pushHistory(cfg);
        syncPreviewCache(cfg);
      }
      function publish() {
        const d = getDraft();
        write(K_PUB, d);
        setStatus("Publicado " + stamp());
      }

      function setStatus(text) {
        statusBadge.textContent = text;
      }

      // Historial (deshacer/rehacer)
      function pushHistory(cfg) {
        let hist = read(K_HIST, []);
        let idx = read(K_HIDX, -1);
        // Si hay "futuro", se corta
        if (idx < hist.length - 1) hist = hist.slice(0, idx + 1);
        hist.push(cfg);
        if (hist.length > 30) hist = hist.slice(-30);
        idx = hist.length - 1;
        write(K_HIST, hist);
        write(K_HIDX, idx);
      }
      function applyFromHistory() {
        const hist = read(K_HIST, []);
        const idx = read(K_HIDX, -1);
        const snap = hist[idx] || {};
        write(K_DRAFT, snap);
        fillForm(snap);
        syncPreviewCache(snap);
        setStatus("Borrador (historial) " + stamp());
      }
      function undo() {
        let idx = read(K_HIDX, -1);
        if (idx <= 0) return;
        write(K_HIDX, --idx);
        applyFromHistory();
      }
      function redo() {
        const hist = read(K_HIST, []);
        let idx = read(K_HIDX, -1);
        if (idx >= hist.length - 1) return;
        write(K_HIDX, ++idx);
        applyFromHistory();
      }

      // Form <-> objeto ----------------------------------------------------
      function formToCfg() {
        const sel = $("featured");
        const featured = Array.from(sel.selectedOptions).map((o) => o.value);
        return {
          storeName: $("storeName").value.trim(),
          themeClass: $("themeClass").value,
          heroImage: $("heroImage").value.trim(),
          tagline: $("tagline").value.trim(),
          cta: {
            one: {
              text: $("cta1_text")?.value?.trim() || "",
              href: $("cta1_href")?.value?.trim() || "",
              show: true,
            },
            two: {
              text: $("cta2_text")?.value?.trim() || "",
              href: $("cta2_href")?.value?.trim() || "",
              show: true,
            },
            three: {
              text: $("cta3_text")?.value?.trim() || "",
              href: $("cta3_href")?.value?.trim() || "",
              show: true,
            },
          },
          featured,
          footerText: $("footerText").value.trim(),
        };
      }
      function fillForm(cfg) {
        $("storeName").value = cfg.storeName || "";
        $("themeClass").value = cfg.themeClass || "";
        $("heroImage").value = cfg.heroImage || "";
        $("tagline").value = cfg.tagline || "";
        $("cta1_text").value = cfg.cta?.one?.text || "";
        $("cta1_href").value = cfg.cta?.one?.href || "";
        $("cta2_text").value = cfg.cta?.two?.text || "";
        $("cta2_href").value = cfg.cta?.two?.href || "";
        $("cta3_text").value = cfg.cta?.three?.text || "";
        $("cta3_href").value = cfg.cta?.three?.href || "";
        $("footerText").value = cfg.footerText || "";
        // featured
        const sel = $("featured");
        const want = new Set(cfg.featured || []);
        Array.from(sel.options).forEach(
          (o) => (o.selected = want.has(o.value)),
        );
      }

      // Preview
      function syncPreviewCache(cfg) {
        write(K_PREV, cfg); // el iframe leerá esto
        // Para que el sitio en preview cambie de tema sin recargar demasiado:
        try {
          iframe.contentWindow?.localStorage?.setItem(
            K_PREV,
            JSON.stringify(cfg),
          );
        } catch {}
      }
      function refreshPreview() {
        iframe.contentWindow?.location?.reload();
      }

      // API pública para botones
      window.__adm = {
        saveDraft() {
          const cfg = formToCfg();
          setDraft(cfg);
          setStatus("Borrador guardado " + stamp());
        },
        publish() {
          publish();
          refreshPreview();
          alert("¡Publicado! El sitio público ya toma esta configuración.");
        },
        revertToPublished() {
          const pub = getPublished();
          write(K_DRAFT, pub);
          pushHistory(pub);
          fillForm(pub);
          syncPreviewCache(pub);
          setStatus("Borrador = Publicado " + stamp());
        },
        refreshPreview,
        undo,
        redo,
        exportJSON() {
          const blob = new Blob([JSON.stringify(getDraft(), null, 2)], {
            type: "application/json",
          });
          const a = document.createElement("a");
          a.href = URL.createObjectURL(blob);
          a.download = "tutienda-config.json";
          a.click();
          URL.revokeObjectURL(a.href);
        },
        importJSON(obj) {
          if (!obj || typeof obj !== "object") return;
          write(K_DRAFT, obj);
          pushHistory(obj);
          fillForm(obj);
          syncPreviewCache(obj);
          setStatus("Borrador importado " + stamp());
          refreshPreview();
        },
      };

      // Eventos del form (auto estado “sin guardar”)
      form.addEventListener("input", () => setStatus("Cambios sin guardar…"));

      // Importar
      importInput.addEventListener("change", async () => {
        const f = importInput.files?.[0];
        if (!f) return;
        const txt = await f.text();
        try {
          window.__adm.importJSON(JSON.parse(txt));
        } catch {
          alert("JSON inválido");
        } finally {
          importInput.value = "";
        }
      });

      // Atajos teclado: Ctrl+S / Ctrl+Z / Ctrl+Shift+Z
      document.addEventListener("keydown", (e) => {
        const mod = e.ctrlKey || e.metaKey;
        if (mod && e.key.toLowerCase() === "s") {
          e.preventDefault();
          window.__adm.saveDraft();
        }
        if (mod && e.key.toLowerCase() === "z" && !e.shiftKey) {
          e.preventDefault();
          undo();
        }
        if (mod && e.key.toLowerCase() === "z" && e.shiftKey) {
          e.preventDefault();
          redo();
        }
      });

      // Init: aseguramos borrador, historial y preview
      (function init() {
        // si no hay publicado, partimos de vacío
        const pub = getPublished();
        if (!localStorage.getItem(K_DRAFT)) write(K_DRAFT, pub);
        if (!localStorage.getItem(K_HIST)) write(K_HIST, [getDraft()]);
        if (read(K_HIDX, -1) === -1) write(K_HIDX, 0);

        const draft = getDraft();
        fillForm(draft);
        syncPreviewCache(draft);
        setStatus("Borrador cargado " + stamp());
      })();
    })();
  </script>

  <script>
    // Poblar select #featured con productos desde la API
    //@ts-nocheck
    (async function () {
      try {
        const sel = document.getElementById("featured");
        if (!sel) return;
        const res = await fetch(`/api/products?store=mi-tienda-demo`);
        if (!res.ok) return;
        const data = await res.json();
        const list = Array.isArray(data?.products) ? data.products : [];
        sel.innerHTML = list
          .map((p) => `<option value="${p.slug}">${p.title}</option>`)
          .join("");
      } catch (e) {
        console.warn(e);
      }
    })();
  </script>

  <script>
    // Asegurar que admin-categories.js esté cargado y disponible.
    //@ts-nocheck
    // Esto evita que botones inline fallen si por algún motivo el script no se registró.
    document.addEventListener("DOMContentLoaded", function () {
      if (typeof window.__loadList === "function") return;
      const s = document.createElement("script");
      s.src = "/admin-categories.js";
      s.defer = true;
      s.onload = function () {
        try {
          if (typeof window.__loadList === "function") window.__loadList();
        } catch (e) {
          console.warn("Error ejecutando __loadList tras cargar script", e);
        }
      };
      s.onerror = function () {
        console.error("No se pudo cargar /admin-categories.js");
      };
      document.head.appendChild(s);
    });
  </script>
</AdminLayout>
